upstream app {
    server __RSTUDIO_URL__;
}

server {
        set $USER_ID '';
        set $ACCESS_TOKEN '';

        listen   3002;
        root     /opt/nginx/html;
        resolver 10.96.0.10  valid=1s    ipv6=off;
        # lua_ssl_verify_depth 0;


        # I disabled caching so the browser won't cache the site.
        expires           0;
        add_header        Cache-Control private;

        location /health {
            access_log off;
            add_header 'Content-Type' 'application/json';
            return 200 '{"status":"UP"}';
        }

        location / {

            access_by_lua_block  {
                local opts = {
                    redirect_uri_path = "/redirect_uri",
                    accept_none_alg = true,
                    discovery = "https://__KEYCLOAK_URL__/realms/master/.well-known/openid-configuration",
                    client_id = "__KEYCLOAK_CLIENT_ID__",
                    client_secret = "__KEYCLOAK_SECRET__",
                    redirect_uri_scheme = "http",
                    ssl_verify = "no",
                    logout_path = "/logout",
                    redirect_after_logout_uri = "https://__KEYCLOAK_URL__/realms/master/protocol/openid-connect/logout",
                    redirect_after_logout_with_id_token_hint = false,
                }

                -- call introspect for OAuth 2.0 Bearer Access Token validation
                local res, err = require("resty.openidc").authenticate(opts)

                if err then
                    ngx.status = 403
                    ngx.say(err)
                    ngx.exit(ngx.HTTP_FORBIDDEN)
                end

                ngx.var.USER_ID = res.id_token.sub;
            }

            proxy_pass                    http://app;
            proxy_set_header              X-Forwarded-For $remote_addr;

            header_filter_by_lua_block {
                ngx.header["X-USER-ID"] = ngx.var.USER_ID;
            }
        }

        # redirect server error pages to the static page /40x.html
        #
        error_page 404 /404.html;
        location = /40x.html {}

        # redirect server error pages to the static page /50x.html
        #
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
}
